"use strict";
// 1. TypeScript가 탄생하게 된 배경
// 자바스크립트는 원래 클라이언트 측 언어로 도입 되었습니다.
// Node.js의 개발로 인해 자바스크립트를 클라이언트 측 뿐만이 아닌 서버 측 기술로도 활용되게 만들었습니다.
// 그러나 자바스크립트 코드가 커지면 커질수록 소스코드가 더 복잡해져 코드를 유지관리하고 재사용하기가 어려워졌습니다.
// 더욱이 Type 검사 및 컴파일 시 오류 검사의 기능을 수용하지 못하기 때문에 자바스크립트가 본격적인 서버 측 기술로 엔터프라이즈 수준에서 성공하지 못합니다.
// 이 간극을 메우기 위해 타입스크립트가 제시되었다.
// 2. 타입스크립트란?
// 타입스크립트는 자바스크립트를 포함하고 있으며
// 자바스크립트의 원래 기능 + 타입시스템이 타입스크립트라고 한다.
// 타입스크립트를 컴파일하여 자바스크립트로 바꾼 다음에 브라우저나 Node.js 환경에서 동작하도록 한다.
// 자바스크립트가 동적타입인 반면, 타입스크립트는 정적타입의 언어이다. => 타입의 안정성이 갖춰진다.
// 3. 타입시스템
// - 개발 환경에서 에러를 잡는 걸 도와준다.
// - 타입 애너테이션을 사용해서 코드를 분석할 수 있다.
// - 오직 개발환경에서만 활성화 된다.
// - 타입스크립트는 성능 향상과는 관계가 없다.
// 4. 타입스크립트를 사용하는 이유
// 타입스크립트는 자바스크립트 코드를 단순화하여 더 쉽게 읽고 디버그 할 수 있도록 한다.
// 타입스크립트는 코드 유형 검사를 통해 자바스크립트를 작성할 때, 개발자가 일반적으로 겪는 버그를 피하는 데 도움이 될 수 있다.
